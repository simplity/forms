/*
 * Copyright (c) 2019 simplity.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.simplity.fm.core.db;

import java.sql.SQLException;

import org.simplity.fm.core.valueschema.ValueType;

/**
 * @author simplity.org
 *
 */
public abstract class SqlWriterWithFields extends Sql {

	protected SqlWriterWithFields(final String sqlText,
			final String[] parameterNames, final ValueType[] parameterTypes) {
		super(sqlText, parameterNames, parameterTypes, null);
	}

	/**
	 * Update/insert/delete operation. To be called after setting values for all
	 * the fields using setters
	 *
	 * @param handle
	 * @return number of rows affected
	 * @throws SQLException
	 */
	@Override
	protected int write(final IReadWriteHandle handle) throws SQLException {
		this.checkValues();
		return handle.write(this.sqlText, this.parameterValues,
				this.parameterTypes);
	}

	/**
	 * Update/insert/delete one row. To be called after setting values for all
	 * the fields using setters
	 *
	 * @param handle
	 * @throws SQLException
	 *             if no rows are affected, or any sql error
	 */
	@Override
	protected int writeOrFail(final IReadWriteHandle handle)
			throws SQLException {
		final int n = this.write(handle);
		if (n > 0) {
			return n;
		}
		throw new SQLException(
				"Sql is expected to affect at least one row, but no rows are affected.");
	}
}
