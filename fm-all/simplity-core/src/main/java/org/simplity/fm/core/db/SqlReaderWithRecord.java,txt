/*
 * Copyright (c) 2019 simplity.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.simplity.fm.core.db;

import java.sql.SQLException;

import org.simplity.fm.core.data.DataTable;
import org.simplity.fm.core.data.Record;

/**
 * Base class for generating SQL-Reader that has a record as its input parameter
 * specification
 *
 * @author simplity.org
 *
 */
public abstract class SqlReaderWithRecord {
	protected final String sqlText;

	protected SqlReaderWithRecord(final String sqlText) {
		this.sqlText = sqlText;
	}

	/**
	 * concrete class uses a signature with extended record-instances for input
	 * and output records for example
	 *
	 * <code>
	 * public boolean read(final IReadonlyHandle handle, CustomerSelectionRecord inputParams,
	 * 			CustomerDetailsRecord outputRecord) throws SQLException{
	 * 	return super.read(handle, inputParams, outputRecord);
	 * }
	 * </code>
	 */
	protected boolean read(final IReadonlyHandle handle, Record inputRecord,
			Record outputRecord) throws SQLException {

		return handle.readIntoRecord(this.sqlText, inputRecord, outputRecord);
	}

	/**
	 * concrete class uses this to readMany with params of specific concrete
	 * class
	 */
	protected void readMany(final IReadonlyHandle handle, Record inputRecord,
			DataTable<Record> dataTable) throws SQLException {

		handle.readIntoDataTable(this.sqlText, inputRecord, dataTable);
	}

	/**
	 * to be used when a row is expected as per our db design, and hence the
	 * caller need not handle the case with no rows
	 *
	 * @param handle
	 * @return non-null record with the first filtered row
	 * @throws SQLException
	 *             thrown when any SQL exception, OR when no rows are filtered
	 */
	protected boolean readOrFail(final IReadonlyHandle handle,
			Record inputRecord, Record outputRecord) throws SQLException {
		final boolean result = this.read(handle, inputRecord, outputRecord);

		if (result == false) {
			throw new SQLException("Expected one row, but none found");
		}
		return result;
	}
}
